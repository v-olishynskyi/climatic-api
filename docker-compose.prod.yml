version: '3.9'

services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: climatic_api_prod
    restart: always
    ports:
      - '3000:3000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env.prod
    environment:
      NODE_ENV: production

  postgres:
    image: postgres:15
    container_name: climatic_postgres_prod
    restart: always
    #ports:
    #- '5432:5432' # ❗️Вимкни в production, якщо не потрібно зовні
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    env_file:
      - .env.prod
    volumes:
      - pg_data_prod:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: climatic_redis_prod
    restart: always
    #ports:
    #- '6379:6379' # ❗️Вимкни в production, якщо не потрібно зовні
    env_file:
      - .env.prod
    volumes:
      - redis_data_prod:/data

  rabbitmq:
    image: rabbitmq:3.13-management
    container_name: climatic_rabbitmq_prod
    restart: always
    ports:
      - '5672:5672' # AMQP
      - '15672:15672' # Web UI
    env_file:
      - .env.prod
    volumes:
      - rabbitmqdata_prod:/var/lib/rabbitmq
    healthcheck:
      test: ['CMD', 'rabbitmq-diagnostics', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  subscription_confirmation_worker:
    container_name: climatic_subscription_confirmation_worker_prod
    build:
      context: .
      dockerfile: Dockerfile_worker
    command: ['node', 'dist/rabbitmq.subscription-confirmation.main.js']
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env.prod
    environment:
      NODE_ENV: production

  weather_daily_worker:
    container_name: climatic_weather_daily_worker_prod
    build:
      context: .
      dockerfile: Dockerfile_worker
    command: ['node', 'dist/rabbitmq.weather-daily.main.js']
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env.prod
    environment:
      NODE_ENV: production

  weather_hourly_worker:
    container_name: climatic_weather_hourly_worker_prod
    build:
      context: .
      dockerfile: Dockerfile_worker
    command: ['node', 'dist/rabbitmq.weather-hourly.main.js']
    restart: always
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env.prod
    environment:
      NODE_ENV: production

volumes:
  pg_data_prod:
  redis_data_prod:
  rabbitmqdata_prod:
